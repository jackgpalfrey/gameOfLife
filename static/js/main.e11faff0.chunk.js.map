{"version":3,"sources":["App.tsx","index.tsx"],"names":["neighborRelativePositions","App","useState","createGrid","grid","setGrid","prevGrid","setPrevGrid","isRunning","setRunning","isNeighborsVisible","setNeighborVisible","isGridVisible","setGridVisible","speed","setSpeed","newArr","i","row","j","push","duplicate2DArray","array","forEach","val","saveGrid","runRef","useRef","speedRef","getNeighbors","x","y","neighbors","xOffset","yOffset","xPos","yPos","simulate","canRun","prevState","newGrid","node","setTimeout","current","style","display","height","justifyContent","alignItems","flexDirection","className","marginBottom","width","border","padding","onClick","marginLeft","curGrid","loadGrid","window","location","type","min","max","value","onChange","e","parseInt","target","map","colDivs","neighborsVal","boxSizing","backgroundColor","textAlign","color","isActive","setNode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e11faff0.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\n\nconst numRows = 70;\nconst numCols = 32;\n\nconst neighborRelativePositions = [\n\t[0, 1],\n\t[0, -1],\n\t[1, -1],\n\t[-1, 1],\n\t[1, 1],\n\t[-1, -1],\n\t[1, 0],\n\t[-1, 0],\n];\n\nconst App: React.FC = () => {\n\tconst [grid, setGrid] = useState(createGrid());\n\tconst [prevGrid, setPrevGrid] = useState(createGrid());\n\tconst [isRunning, setRunning] = useState(false);\n\tconst [isNeighborsVisible, setNeighborVisible] = useState(false);\n\tconst [isGridVisible, setGridVisible] = useState(true);\n\tconst [speed, setSpeed] = useState(500);\n\n\tfunction createGrid() {\n\t\tlet newArr = [];\n\t\tfor (let i = 0; i < numRows; i++) {\n\t\t\tlet row = [];\n\t\t\tfor (let j = 0; j < numCols; j++) {\n\t\t\t\trow.push(false);\n\t\t\t}\n\t\t\tnewArr.push(row);\n\t\t}\n\t\treturn newArr;\n\t}\n\n\tfunction duplicate2DArray(array: boolean[][]) {\n\t\tlet newArr: boolean[][] = [];\n\t\tarray.forEach((val) => {\n\t\t\tnewArr.push([...val]);\n\t\t});\n\n\t\treturn newArr;\n\t}\n\n\tfunction setNode(x: number, y: number, isActive: boolean) {\n\t\tlet newGrid = [...grid];\n\t\tnewGrid[x][y] = isActive;\n\t\tsetGrid(newGrid);\n\t}\n\n\tfunction saveGrid() {\n\t\tsetPrevGrid(duplicate2DArray(grid));\n\t}\n\n\tfunction loadGrid() {\n\t\tsetRunning(false);\n\t\trunRef.current = false;\n\t\tlet curGrid = duplicate2DArray(grid);\n\t\tsetGrid(duplicate2DArray(prevGrid));\n\t\tsetPrevGrid(curGrid);\n\t}\n\n\tfunction drawGrid() {\n\t\tlet divGrid = grid.map((row, x) => {\n\t\t\tlet colDivs = row.map((node, y) => {\n\t\t\t\tlet neighbors = '';\n\t\t\t\tif (isNeighborsVisible) {\n\t\t\t\t\tlet neighborsVal = getNeighbors(grid, x, y);\n\t\t\t\t\tneighbors = neighborsVal === 0 ? '' : `${neighborsVal}`;\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: '20px',\n\t\t\t\t\t\t\theight: '20px',\n\t\t\t\t\t\t\tboxSizing: 'border-box',\n\t\t\t\t\t\t\tbackgroundColor: `${node ? 'gray' : '#1e1e1e'}`,\n\t\t\t\t\t\t\tborder: `${isGridVisible ? 'solid 0.1px #5f5f5f' : 'none'}`,\n\t\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetNode(x, y, !node);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{neighbors}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn (\n\t\t\t\t<div style={{ display: 'flex', flexDirection: 'column' }}>\n\t\t\t\t\t{colDivs}\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\n\t\treturn divGrid;\n\t}\n\tlet runRef = useRef(isRunning);\n\tlet speedRef = useRef(speed);\n\n\tfunction getNeighbors(grid: any, x: number, y: number) {\n\t\tlet neighbors = 0;\n\t\tneighborRelativePositions.forEach(([xOffset, yOffset]) => {\n\t\t\tlet xPos = x + xOffset;\n\t\t\tlet yPos = y + yOffset;\n\t\t\tif (xPos >= 0 && xPos < numRows && yPos >= 0 && yPos < numCols) {\n\t\t\t\tif (grid[xPos][yPos]) neighbors++;\n\t\t\t}\n\t\t});\n\t\treturn neighbors;\n\t}\n\n\tfunction simulate(canRun?: boolean) {\n\t\tif (canRun) {\n\t\t\tsetGrid((prevState) => {\n\t\t\t\tlet newGrid = duplicate2DArray(prevState);\n\t\t\t\tprevState.forEach((row, x) => {\n\t\t\t\t\trow.forEach((node, y) => {\n\t\t\t\t\t\tlet neighbors = getNeighbors(prevState, x, y);\n\n\t\t\t\t\t\t// Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n\t\t\t\t\t\t// Any live cell with more than three live neighbours dies, as if by overpopulation.\n\t\t\t\t\t\tif (neighbors < 2 || neighbors > 3) newGrid[x][y] = false;\n\t\t\t\t\t\t// Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n\t\t\t\t\t\tif (!node && neighbors === 3) newGrid[x][y] = true;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\treturn newGrid;\n\t\t\t});\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tsimulate(runRef.current);\n\t\t\t}, speedRef.current);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'flex',\n\t\t\t\theight: '100vh',\n\t\t\t\tjustifyContent: 'center',\n\t\t\t\talignItems: 'center',\n\t\t\t\tflexDirection: 'column',\n\t\t\t}}>\n\t\t\t<div>\n\t\t\t\t<div className='menu'>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '1em',\n\t\t\t\t\t\t\twidth: '5em',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\tpadding: '.7em',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tif (!isRunning) {\n\t\t\t\t\t\t\t\tsaveGrid();\n\t\t\t\t\t\t\t\tsetRunning(true);\n\t\t\t\t\t\t\t\trunRef.current = true;\n\t\t\t\t\t\t\t\tsimulate(true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetRunning(false);\n\t\t\t\t\t\t\t\trunRef.current = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{isRunning ? 'Stop' : 'Run'}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '1em',\n\t\t\t\t\t\t\tmarginLeft: '2em',\n\t\t\t\t\t\t\twidth: '5em',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\tpadding: '.7em',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetRunning(false);\n\t\t\t\t\t\t\trunRef.current = false;\n\t\t\t\t\t\t\tsaveGrid();\n\t\t\t\t\t\t\tsetGrid(createGrid());\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\tClear\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '1em',\n\t\t\t\t\t\t\tmarginLeft: '2em',\n\t\t\t\t\t\t\twidth: '7em',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\tpadding: '.7em',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetGridVisible(!isGridVisible);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{isGridVisible ? 'Hide Grid' : 'Show Grid'}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '1em',\n\t\t\t\t\t\t\tmarginLeft: '2em',\n\t\t\t\t\t\t\twidth: '15em',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\tpadding: '.7em',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetNeighborVisible(!isNeighborsVisible);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{isNeighborsVisible\n\t\t\t\t\t\t\t? 'Hide Number Of Neighbors'\n\t\t\t\t\t\t\t: 'Show Number Of Neighbors'}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '1em',\n\t\t\t\t\t\t\tmarginLeft: '2em',\n\t\t\t\t\t\t\twidth: '5em',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\tpadding: '.7em',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tloadGrid();\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\tRestore\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '1em',\n\t\t\t\t\t\t\tmarginLeft: '2em',\n\t\t\t\t\t\t\twidth: '5em',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\tpadding: '.7em',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\twindow.location = 'https://wikipedia.org/wiki/Conway%27s_Game_of_Life' as any;\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\tAbout\n\t\t\t\t\t</button>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p>Speed ({speed}): </p>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName='slider'\n\t\t\t\t\t\t\ttype='range'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='1000'\n\t\t\t\t\t\t\tvalue={speed}\n\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\tsetSpeed(parseInt(e.target.value));\n\t\t\t\t\t\t\t\tspeedRef.current = parseInt(e.target.value);\n\t\t\t\t\t\t\t}}></input>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName='App'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tflexDirection: 'row',\n\t\t\t\t\t\tborder: 'solid 2px #5f5f5f',\n\t\t\t\t\t}}>\n\t\t\t\t\t{drawGrid()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}