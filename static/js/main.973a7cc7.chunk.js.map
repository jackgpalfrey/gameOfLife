{"version":3,"sources":["App.tsx","index.tsx"],"names":["neighborRelativePositions","App","useState","createGrid","grid","setGrid","isRunning","setRunning","isNeighborsVisible","setNeighborVisible","isGridVisible","setGridVisible","speed","setSpeed","newArr","i","row","j","push","runRef","useRef","speedRef","getNeighbors","x","y","neighbors","forEach","xOffset","yOffset","xPos","yPos","simulate","canRun","prevState","newGrid","array","val","duplicate2DArray","node","setTimeout","current","style","display","height","justifyContent","alignItems","flexDirection","className","marginBottom","width","border","padding","onClick","marginLeft","window","location","type","min","max","value","onChange","e","parseInt","target","map","colDivs","neighborsVal","boxSizing","backgroundColor","textAlign","color","isActive","setNode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.973a7cc7.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\n\nconst numRows = 70;\nconst numCols = 32;\n\nconst neighborRelativePositions = [\n\t[0, 1],\n\t[0, -1],\n\t[1, -1],\n\t[-1, 1],\n\t[1, 1],\n\t[-1, -1],\n\t[1, 0],\n\t[-1, 0],\n];\n\nconst App: React.FC = () => {\n\tconst [grid, setGrid] = useState(createGrid());\n\tconst [isRunning, setRunning] = useState(false);\n\tconst [isNeighborsVisible, setNeighborVisible] = useState(false);\n\tconst [isGridVisible, setGridVisible] = useState(true);\n\tconst [speed, setSpeed] = useState(500);\n\n\tfunction createGrid() {\n\t\tlet newArr = [];\n\t\tfor (let i = 0; i < numRows; i++) {\n\t\t\tlet row = [];\n\t\t\tfor (let j = 0; j < numCols; j++) {\n\t\t\t\trow.push(false);\n\t\t\t}\n\t\t\tnewArr.push(row);\n\t\t}\n\t\treturn newArr;\n\t}\n\n\tfunction duplicate2DArray(array: boolean[][]) {\n\t\tlet newArr: boolean[][] = [];\n\t\tarray.forEach((val) => {\n\t\t\tnewArr.push([...val]);\n\t\t});\n\n\t\treturn newArr;\n\t}\n\n\tfunction setNode(x: number, y: number, isActive: boolean) {\n\t\tlet newGrid = [...grid];\n\t\tnewGrid[x][y] = isActive;\n\t\tsetGrid(newGrid);\n\t}\n\n\tfunction drawGrid() {\n\t\tlet divGrid = grid.map((row, x) => {\n\t\t\tlet colDivs = row.map((node, y) => {\n\t\t\t\tlet neighbors = '';\n\t\t\t\tif (isNeighborsVisible) {\n\t\t\t\t\tlet neighborsVal = getNeighbors(grid, x, y);\n\t\t\t\t\tneighbors = neighborsVal === 0 ? '' : `${neighborsVal}`;\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: '20px',\n\t\t\t\t\t\t\theight: '20px',\n\t\t\t\t\t\t\tboxSizing: 'border-box',\n\t\t\t\t\t\t\tbackgroundColor: `${node ? 'gray' : '#1e1e1e'}`,\n\t\t\t\t\t\t\tborder: `${isGridVisible ? 'solid 0.1px #5f5f5f' : 'none'}`,\n\t\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetNode(x, y, !node);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{neighbors}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn (\n\t\t\t\t<div style={{ display: 'flex', flexDirection: 'column' }}>\n\t\t\t\t\t{colDivs}\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\n\t\treturn divGrid;\n\t}\n\tlet runRef = useRef(isRunning);\n\tlet speedRef = useRef(speed);\n\n\tfunction getNeighbors(grid: any, x: number, y: number) {\n\t\tlet neighbors = 0;\n\t\tneighborRelativePositions.forEach(([xOffset, yOffset]) => {\n\t\t\tlet xPos = x + xOffset;\n\t\t\tlet yPos = y + yOffset;\n\t\t\tif (xPos >= 0 && xPos < numRows && yPos >= 0 && yPos < numCols) {\n\t\t\t\tif (grid[xPos][yPos]) neighbors++;\n\t\t\t}\n\t\t});\n\t\treturn neighbors;\n\t}\n\n\tfunction simulate(canRun?: boolean) {\n\t\tif (canRun) {\n\t\t\tsetGrid((prevState) => {\n\t\t\t\tlet newGrid = duplicate2DArray(prevState);\n\t\t\t\tprevState.forEach((row, x) => {\n\t\t\t\t\trow.forEach((node, y) => {\n\t\t\t\t\t\tlet neighbors = getNeighbors(prevState, x, y);\n\n\t\t\t\t\t\t// Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n\t\t\t\t\t\t// Any live cell with more than three live neighbours dies, as if by overpopulation.\n\t\t\t\t\t\tif (neighbors < 2 || neighbors > 3) newGrid[x][y] = false;\n\t\t\t\t\t\t// Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n\t\t\t\t\t\tif (!node && neighbors === 3) newGrid[x][y] = true;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\treturn newGrid;\n\t\t\t});\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tsimulate(runRef.current);\n\t\t\t}, speedRef.current);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'flex',\n\t\t\t\theight: '100vh',\n\t\t\t\tjustifyContent: 'center',\n\t\t\t\talignItems: 'center',\n\t\t\t\tflexDirection: 'column',\n\t\t\t}}>\n\t\t\t<div>\n\t\t\t\t<div className='menu'>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '1em',\n\t\t\t\t\t\t\twidth: '5em',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\tpadding: '.7em',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tif (!isRunning) {\n\t\t\t\t\t\t\t\tsetRunning(true);\n\t\t\t\t\t\t\t\trunRef.current = true;\n\t\t\t\t\t\t\t\tsimulate(true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetRunning(false);\n\t\t\t\t\t\t\t\trunRef.current = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{isRunning ? 'Stop' : 'Run'}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '1em',\n\t\t\t\t\t\t\tmarginLeft: '2em',\n\t\t\t\t\t\t\twidth: '5em',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\tpadding: '.7em',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetRunning(false);\n\t\t\t\t\t\t\trunRef.current = false;\n\t\t\t\t\t\t\tsetGrid(createGrid());\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\tClear\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '1em',\n\t\t\t\t\t\t\tmarginLeft: '2em',\n\t\t\t\t\t\t\twidth: '7em',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\tpadding: '.7em',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetGridVisible(!isGridVisible);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{isGridVisible ? 'Hide Grid' : 'Show Grid'}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '1em',\n\t\t\t\t\t\t\tmarginLeft: '2em',\n\t\t\t\t\t\t\twidth: '15em',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\tpadding: '.7em',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetNeighborVisible(!isNeighborsVisible);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{isNeighborsVisible\n\t\t\t\t\t\t\t? 'Hide Number Of Neighbors'\n\t\t\t\t\t\t\t: 'Show Number Of Neighbors'}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginBottom: '1em',\n\t\t\t\t\t\t\tmarginLeft: '2em',\n\t\t\t\t\t\t\twidth: '5em',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\tpadding: '.7em',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\twindow.location = 'https://wikipedia.org/wiki/Conway%27s_Game_of_Life' as any;\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\tAbout\n\t\t\t\t\t</button>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p>Speed ({speed}): </p>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName='slider'\n\t\t\t\t\t\t\ttype='range'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='1000'\n\t\t\t\t\t\t\tvalue={speed}\n\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\tsetSpeed(parseInt(e.target.value));\n\t\t\t\t\t\t\t\tspeedRef.current = parseInt(e.target.value);\n\t\t\t\t\t\t\t}}></input>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName='App'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tflexDirection: 'row',\n\t\t\t\t\t\tborder: 'solid 2px #5f5f5f',\n\t\t\t\t\t}}>\n\t\t\t\t\t{drawGrid()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}